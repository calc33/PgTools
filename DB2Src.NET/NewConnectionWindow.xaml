<Window x:Name="window" x:Class="Db2Source.NewConnectionWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:local="clr-namespace:Db2Source"
        mc:Ignorable="d"
        FontFamily="{Binding FontFamily, Source={StaticResource BaseFont}}" FontSize="{Binding FontSize, Source={StaticResource BaseFont}}" FontStretch="{Binding FontStretch, Source={StaticResource BaseFont}}" FontStyle="{Binding FontStyle, Source={StaticResource BaseFont}}" FontWeight="{Binding FontWeight, Source={StaticResource BaseFont}}"
        Title="新規データベース接続" Height="Auto" d:DesignHeight="154.939" WindowStyle="ToolWindow" ScrollViewer.VerticalScrollBarVisibility="Disabled"
        WindowStartupLocation="CenterScreen" SizeToContent="WidthAndHeight" Background="White"
        HorizontalAlignment="Left" VerticalAlignment="Top" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
        Initialized="window_Initialized" LocationChanged="window_LocationChanged" Loaded="window_Loaded" LayoutUpdated="window_LayoutUpdated">
    <Window.Resources>
        <sys:String x:Key="checkBoxTextShowPassword">パスワードを表示</sys:String>
        <sys:String x:Key="checkBoxTextSavePassword">パスワードを保存</sys:String>
        <sys:String x:Key="deleteConnectionInfoFormat">{0}を削除</sys:String>
        <sys:String x:Key="deleteConnectionInfo">削除</sys:String>
        <sys:String x:Key="deleteConnectionInfoCaption">削除</sys:String>
        <sys:String x:Key="deleteConnectionInfoMessage">{0}を削除します。よろしいですか。</sys:String>
        <!--<local:TreeViewConnectionSelector x:Key="TreeViewConnectionSelector"/>-->
        <local:LastConnectedConverter x:Key="LastConnectedConverter"/>
        <Style x:Key="ToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="ContentTemplate" Value="{StaticResource ImageLeftArrow8}"/>
                            </Trigger>
                            <Trigger Property="Button.IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TreeViewItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB"/>
        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181"/>
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                            <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type TreeViewItem}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding" Value="1,0,0,0"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <StackPanel Orientation="Horizontal">
                                    <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    <Canvas Visibility="{Binding Tag.IsLastConnectionFailed, RelativeSource={RelativeSource AncestorType=TreeViewItem}, Converter={StaticResource BooleanToVisibilityConverter}}" Width="14" Height="14" VerticalAlignment="Center" ToolTip="前回の接続に失敗しています" Margin="2,0">
                                        <Ellipse Stroke="DarkGray" Fill="LightGoldenrodYellow" Width="14" Height="14"/>
                                        <Rectangle Stroke="DarkSlateGray" Width="2" Height="7" Canvas.Left="6" Canvas.Top="2"/>
                                        <Rectangle Fill="DarkSlateGray" Width="2" Height="2" Canvas.Left="6" Canvas.Top="10"/>
                                    </Canvas>
                                </StackPanel>
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                    <Condition Property="IsSelectionActive" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel/>
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Grid x:Name="gridBase">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <StackPanel x:Name="StackPanelMain" Orientation="Vertical" HorizontalAlignment="Left" VerticalAlignment="Top">
            <!--<ScrollViewer VerticalScrollBarVisibility="Hidden" HorizontalScrollBarVisibility="Auto">-->
                <Grid x:Name="GridProperties">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <DockPanel Grid.ColumnSpan="2" Margin="2,0,0,2">
                        <ToggleButton x:Name="buttonShowConnections" DockPanel.Dock="Right" MinWidth="16" ContentTemplate="{StaticResource ImageRightArrow8}" IsChecked="True" Click="buttonShowConnections_Click"/>
                        <Border BorderBrush="{StaticResource Button.Static.Border}" BorderThickness="1,1,0,1">
                            <TextBlock x:Name="textBlockConnectionName" Text="{Binding Target, ElementName=window}" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Border>
                    </DockPanel>
                    <TextBlock Grid.Column="0" Grid.Row="1" Margin="2" VerticalAlignment="Center" HorizontalAlignment="Right" Text="種別"/>
                    <TextBox Grid.Column="1" Grid.Row="1" Margin="2" IsReadOnly="True" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Text="{Binding Target.DatabaseType, ElementName=window, Mode=OneWay}" MinWidth="300"/>
                    <TextBlock x:Name="textBlockTitleColor" Grid.Column="0" Grid.Row="2" Margin="2" VerticalAlignment="Center" HorizontalAlignment="Right" Text="タイトル色"/>
                    <StackPanel x:Name="stackPanelTitleColor" Grid.Column="1" Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Left">
                        <Button x:Name="buttonTitleColor" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" BorderThickness="1" Width="40" VerticalAlignment="Stretch" Margin="2" Background="{Binding Target.BackgroundColor, Converter={StaticResource RGBToBrushConverter}, ElementName=window}" Click="buttonTitleColor_Click"/>
                        <CheckBox x:Name="checkBoxTitleColor" Content="既定値を使用" VerticalAlignment="Center" IsChecked="{Binding Target.UseDefaultBackgroundColor, ElementName=window}" Click="checkBoxTitleColor_Click"/>
                    </StackPanel>
                    <StackPanel x:Name="stackPanelLastConnected" Grid.Column="1" Grid.Row="3" Orientation="Horizontal">
                        <TextBlock x:Name="textBlockLastConnected" Text="{Binding Target.LastConnected, ElementName=window, Converter={StaticResource LastConnectedConverter}, ConverterParameter=前回接続:\ ;yyyy/MM/dd\ HH:mm;(不明)}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </StackPanel>
                </Grid>
            <!--</ScrollViewer>-->
            <local:EquallyStackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                <Button x:Name="buttonTest" Grid.Column="0" Margin="5" Padding="5" Click="buttonTest_Click" Content="接続テスト"/>
                <Button x:Name="buttonOK" Grid.Column="1" Margin="5" Padding="5" IsDefault="True" Click="buttonOK_Click" Content="OK"/>
                <Button x:Name="buttonCancel" Grid.Column="2" Margin="5" Padding="5" IsCancel="True" Click="buttonCancel_Click" Content="キャンセル"/>
            </local:EquallyStackPanel>
        </StackPanel>
        <DockPanel x:Name="dockPanelConnections" Grid.Column="1" Visibility="{Binding IsChecked, ElementName=buttonShowConnections, Converter={StaticResource BooleanToVisibilityConverter}}" Margin="4,0,0,0">
            <Border DockPanel.Dock="Top" BorderBrush="{StaticResource TextBox.Static.Border}" BorderThickness="1">
                <DockPanel>
                    <Button DockPanel.Dock="Right" Background="Transparent" BorderThickness="0" ContentTemplate="{StaticResource ImageSearch12}"/>
                    <TextBox x:Name="textBoxFilterTreeView" BorderThickness="0" TextChanged="textBoxFilterTreeView_TextChanged" PreviewKeyDown="textBoxFilterTreeView_PreviewKeyDown"/>
                </DockPanel>
            </Border>
            <TreeView x:Name="treeViewConnections" MinWidth="200" MouseDoubleClick="treeViewConnections_MouseDoubleClick" KeyDown="treeViewConnections_KeyDown" SelectedItemChanged="treeViewConnections_SelectedItemChanged" ContextMenuOpening="treeViewConnections_ContextMenuOpening">
                <TreeView.ContextMenu>
                    <ContextMenu>
                        <MenuItem x:Name="treeViewConnectionsDeleteConnection" Header="削除" Click="treeViewConnectionsDeleteConnection_Click"/>
                    </ContextMenu>
                </TreeView.ContextMenu>
            </TreeView>
        </DockPanel>
        <GridSplitter Grid.Column="1" HorizontalAlignment="Left" Width="4" Background="White" Visibility="{Binding Visibility, ElementName=dockPanelConnections}"/>
        <Grid x:Name="gridLoading" Grid.ColumnSpan="2" Background="#7FFFFFFF" Visibility="Collapsed">
            <TextBlock x:Name="textBlockConnecting" Text="データベースに接続中..." HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="20"/>
        </Grid>
    </Grid>
</Window>
