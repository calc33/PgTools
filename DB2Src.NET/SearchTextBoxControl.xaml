<UserControl x:Class="Db2Source.SearchTextBoxControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Db2Source"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" 
             d:DesignHeight="80" d:DesignWidth="230" ScrollViewer.VerticalScrollBarVisibility="Disabled" Loaded="UserControl_Loaded" IsVisibleChanged="UserControl_IsVisibleChanged">
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Style x:Key="ButtonStyleClose" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <StackPanel Orientation="Horizontal">
                                <!--<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>-->
                                <Canvas x:Name="contentCanvas" Width="18" Height="18" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Line x:Name="contentLine1" X1="3" Y1="3" X2="15" Y2="15" Stroke="{TemplateBinding Foreground}" StrokeThickness="1.5"/>
                                    <Line x:Name="contentLine2" X1="3" Y1="15" X2="15" Y2="3" Stroke="{TemplateBinding Foreground}" StrokeThickness="1.5"/>
                                </Canvas>
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <!--<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>-->
                                <Setter Property="Stroke" TargetName="contentLine1" Value="{StaticResource Button.Disabled.Foreground}"/>
                                <Setter Property="Stroke" TargetName="contentLine2" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyleDropDown" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <!--<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>-->
                            <Canvas x:Name="contentPresenter" Width="6" Height="3" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <Path x:Name="pathTriangle" Fill="{TemplateBinding Foreground}" Data="M0,0 L6,0 L3,3 z"/>
                            </Canvas>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                                <Setter Property="Fill" TargetName="pathTriangle" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid>
        <StackPanel>
            <StackPanel.Background>
                <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}"/>
            </StackPanel.Background>
            <StackPanel Orientation="Horizontal" Margin="2" VerticalAlignment="Center">
                <TextBox x:Name="textBoxSearch" MinWidth="150" VerticalAlignment="Stretch" BorderThickness="0" Margin="1,0,5,0" KeyUp="textBoxSearch_KeyUp"/>
                <Button x:Name="buttonSearch" Content="➡" VerticalAlignment="Stretch" BorderThickness="0" Margin="1,0,0,0" Width="20" Height="20" ToolTip="次を検索(F3)" RenderTransformOrigin="0.5,0.5" Click="buttonSearch_Click">
                    <Button.Tag>
                        <sys:Int32>1</sys:Int32>
                    </Button.Tag>
                </Button>
                <Button x:Name="buttonReverse" Content="⇄" VerticalAlignment="Stretch" BorderThickness="0" Margin="1,0,0,0" Padding="2" Height="20" Click="buttonReverse_Click" Focusable="False" IsTabStop="False" Style="{DynamicResource ButtonStyleDropDown}"/>
                <Button x:Name="buttonClose" VerticalAlignment="Stretch" BorderThickness="0" Margin="5,0,0,0" Width="20" Height="20" Style="{StaticResource ButtonStyleClose}" Click="buttonClose_Click"/>
            </StackPanel>
            <StackPanel Orientation="Vertical" Margin="0,1">
                <CheckBox x:Name="checkBoxFoldOption" Content="オプション" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="2" Background="Transparent" Style="{DynamicResource CheckBoxStyleHideGroup}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" IsChecked="True"/>
                <StackPanel Margin="12,0,0,0">
                    <StackPanel x:Name="stackPanelOptions" Visibility="{Binding IsChecked, ElementName=checkBoxFoldOption, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <CheckBox x:Name="checkBoxWardwrap" Content="単語単位で検索" Margin="1"/>
                        <CheckBox x:Name="checkBoxCaseful" Content="大文字小文字を区別" Margin="1"/>
                        <CheckBox x:Name="checkBoxRegex" Content="正規表現を使用" Margin="1"/>
                    </StackPanel>
                </StackPanel>
            </StackPanel>
        </StackPanel>
        <StackPanel VerticalAlignment="Bottom" HorizontalAlignment="Right">
            <Button x:Name="buttonMovePos" Content="⇩" BorderThickness="0" Margin="2" Padding="2,0" Click="buttonMovePos_Click"/>
        </StackPanel>
    </Grid>
</UserControl>
